{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.redoList = [];\n    this.undoList = [];\n    makeAutoObservable(this);\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undo.length > 0) {\n      let dataURL = this.undoList.pop();\n      let img = new Image();\n      img.src = dataURL;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height), ctx.drawImage(dataURL, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"sources":["/Users/sa/Documents/project/paint/src/store/canvasState.js"],"names":["makeAutoObservable","CanvasState","constructor","canvas","redoList","undoList","setCanvas","pushToRedo","data","push","pushToUndo","undo","ctx","getContext","length","dataURL","pop","img","Image","src","onload","clearRect","width","height","drawImage"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;;AAEA,MAAMC,WAAN,CAAkB;AAKfC,EAAAA,WAAW,GAAG;AAAA,SAJdC,MAIc,GAJL,IAIK;AAAA,SAHdC,QAGc,GAHH,EAGG;AAAA,SAFdC,QAEc,GAFH,EAEG;AACXL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACF;;AAEDM,EAAAA,SAAS,CAACH,MAAD,EAAS;AACf,SAAKA,MAAL,GAAcA,MAAd;AACF;;AAEDI,EAAAA,UAAU,CAACC,IAAD,EAAO;AACd,SAAKJ,QAAL,CAAcK,IAAd,CAAmBD,IAAnB;AACF;;AAEDE,EAAAA,UAAU,CAACF,IAAD,EAAO;AACd,SAAKH,QAAL,CAAcI,IAAd,CAAmBD,IAAnB;AACF;;AACDG,EAAAA,IAAI,GAAG;AACJ,QAAIC,GAAG,GAAG,KAAKT,MAAL,CAAYU,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAI,KAAKF,IAAL,CAAUG,MAAV,GAAmB,CAAvB,EAA0B;AACvB,UAAIC,OAAO,GAAG,KAAKV,QAAL,CAAcW,GAAd,EAAd;AACA,UAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUJ,OAAV;;AACAE,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AAChBR,QAAAA,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKlB,MAAL,CAAYmB,KAAhC,EAAuC,KAAKnB,MAAL,CAAYoB,MAAnD,GACGX,GAAG,CAACY,SAAJ,CAAcT,OAAd,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,KAAKZ,MAAL,CAAYmB,KAAzC,EAAgD,KAAKnB,MAAL,CAAYoB,MAA5D,CADH;AAEF,OAHD;AAKF,KATD,MASO;AACJX,MAAAA,GAAG,CAACS,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKlB,MAAL,CAAYmB,KAAhC,EAAuC,KAAKnB,MAAL,CAAYoB,MAAnD;AACF;AACH;;AAlCc;;AAqClB,eAAe,IAAItB,WAAJ,EAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n   canvas = null\n   redoList = []\n   undoList = []\n\n   constructor() {\n      makeAutoObservable(this)\n   }\n\n   setCanvas(canvas) {\n      this.canvas = canvas\n   }\n\n   pushToRedo(data) {\n      this.redoList.push(data)\n   }\n\n   pushToUndo(data) {\n      this.undoList.push(data)\n   }\n   undo() {\n      let ctx = this.canvas.getContext('2d')\n      if (this.undo.length > 0) {\n         let dataURL = this.undoList.pop()\n         let img = new Image\n         img.src = dataURL\n         img.onload = () => {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height),\n               ctx.drawImage(dataURL, 0, 0, this.canvas.width, this.canvas.height)\n         }\n\n      } else {\n         ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      }\n   }\n}\n\nexport default new CanvasState()"]},"metadata":{},"sourceType":"module"}