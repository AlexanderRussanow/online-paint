{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n  constructor() {\n    this.canvas = null;\n    this.redoList = [];\n    this.undoList = [];\n    this.username = '';\n    makeAutoObservable(this);\n  }\n\n  setUsername(name) {\n    this.username = name;\n  }\n\n  setCanvas(canvas) {\n    this.canvas = canvas;\n  }\n\n  pushToRedo(data) {\n    this.redoList.push(data);\n  }\n\n  pushToUndo(data) {\n    this.undoList.push(data);\n  }\n\n  undo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.undoList.length > 0) {\n      let dataURL = this.undoList.pop();\n      this.redoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataURL;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n  }\n\n  redo() {\n    let ctx = this.canvas.getContext('2d');\n\n    if (this.redoList.length > 0) {\n      let dataURL = this.redoList.pop();\n      this.undoList.push(this.canvas.toDataURL());\n      let img = new Image();\n      img.src = dataURL;\n\n      img.onload = () => {\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      };\n    }\n  }\n\n}\n\nexport default new CanvasState();","map":{"version":3,"sources":["/Users/sa/Documents/project/paint/client/src/store/canvasState.js"],"names":["makeAutoObservable","CanvasState","constructor","canvas","redoList","undoList","username","setUsername","name","setCanvas","pushToRedo","data","push","pushToUndo","undo","ctx","getContext","length","dataURL","pop","toDataURL","img","Image","src","onload","clearRect","width","height","drawImage","redo"],"mappings":"AAAA,SAASA,kBAAT,QAAmC,MAAnC;;AAEA,MAAMC,WAAN,CAAkB;AAMfC,EAAAA,WAAW,GAAG;AAAA,SALdC,MAKc,GALL,IAKK;AAAA,SAJdC,QAIc,GAJH,EAIG;AAAA,SAHdC,QAGc,GAHH,EAGG;AAAA,SAFdC,QAEc,GAFH,EAEG;AACXN,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACF;;AAEDO,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AAChB,SAAKF,QAAL,GAAgBE,IAAhB;AACF;;AAEDC,EAAAA,SAAS,CAACN,MAAD,EAAS;AACf,SAAKA,MAAL,GAAcA,MAAd;AACF;;AAEDO,EAAAA,UAAU,CAACC,IAAD,EAAO;AACd,SAAKP,QAAL,CAAcQ,IAAd,CAAmBD,IAAnB;AACF;;AAEDE,EAAAA,UAAU,CAACF,IAAD,EAAO;AACd,SAAKN,QAAL,CAAcO,IAAd,CAAmBD,IAAnB;AACF;;AACDG,EAAAA,IAAI,GAAG;AACJ,QAAIC,GAAG,GAAG,KAAKZ,MAAL,CAAYa,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAI,KAAKX,QAAL,CAAcY,MAAd,GAAuB,CAA3B,EAA8B;AAC3B,UAAIC,OAAO,GAAG,KAAKb,QAAL,CAAcc,GAAd,EAAd;AACA,WAAKf,QAAL,CAAcQ,IAAd,CAAmB,KAAKT,MAAL,CAAYiB,SAAZ,EAAnB;AACA,UAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUL,OAAV;;AACAG,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AAChBT,QAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKtB,MAAL,CAAYuB,KAAhC,EAAuC,KAAKvB,MAAL,CAAYwB,MAAnD;AACAZ,QAAAA,GAAG,CAACa,SAAJ,CAAcP,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKlB,MAAL,CAAYuB,KAArC,EAA4C,KAAKvB,MAAL,CAAYwB,MAAxD;AACF,OAHD;AAIF,KATD,MASO;AACJZ,MAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKtB,MAAL,CAAYuB,KAAhC,EAAuC,KAAKvB,MAAL,CAAYwB,MAAnD;AACF;AACH;;AAEDE,EAAAA,IAAI,GAAG;AACJ,QAAId,GAAG,GAAG,KAAKZ,MAAL,CAAYa,UAAZ,CAAuB,IAAvB,CAAV;;AACA,QAAI,KAAKZ,QAAL,CAAca,MAAd,GAAuB,CAA3B,EAA8B;AAC3B,UAAIC,OAAO,GAAG,KAAKd,QAAL,CAAce,GAAd,EAAd;AACA,WAAKd,QAAL,CAAcO,IAAd,CAAmB,KAAKT,MAAL,CAAYiB,SAAZ,EAAnB;AACA,UAAIC,GAAG,GAAG,IAAIC,KAAJ,EAAV;AACAD,MAAAA,GAAG,CAACE,GAAJ,GAAUL,OAAV;;AACAG,MAAAA,GAAG,CAACG,MAAJ,GAAa,MAAM;AAChBT,QAAAA,GAAG,CAACU,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKtB,MAAL,CAAYuB,KAAhC,EAAuC,KAAKvB,MAAL,CAAYwB,MAAnD;AACAZ,QAAAA,GAAG,CAACa,SAAJ,CAAcP,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,KAAKlB,MAAL,CAAYuB,KAArC,EAA4C,KAAKvB,MAAL,CAAYwB,MAAxD;AACF,OAHD;AAIF;AACH;;AArDc;;AAwDlB,eAAe,IAAI1B,WAAJ,EAAf","sourcesContent":["import { makeAutoObservable } from \"mobx\";\n\nclass CanvasState {\n   canvas = null\n   redoList = []\n   undoList = []\n   username = ''\n\n   constructor() {\n      makeAutoObservable(this)\n   }\n\n   setUsername (name) {\n      this.username = name\n   }\n\n   setCanvas(canvas) {\n      this.canvas = canvas\n   }\n\n   pushToRedo(data) {\n      this.redoList.push(data)\n   }\n\n   pushToUndo(data) {\n      this.undoList.push(data)\n   }\n   undo() {\n      let ctx = this.canvas.getContext('2d')\n      if (this.undoList.length > 0) {\n         let dataURL = this.undoList.pop()\n         this.redoList.push(this.canvas.toDataURL())\n         let img = new Image()\n         img.src = dataURL\n         img.onload = () => {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n         }\n      } else {\n         ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n      }\n   }\n\n   redo() {\n      let ctx = this.canvas.getContext('2d')\n      if (this.redoList.length > 0) {\n         let dataURL = this.redoList.pop()\n         this.undoList.push(this.canvas.toDataURL())\n         let img = new Image()\n         img.src = dataURL\n         img.onload = () => {\n            ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n         }\n      }\n   }\n}\n\nexport default new CanvasState()"]},"metadata":{},"sourceType":"module"}